#!/usr/bin/env python
"""Update libtool version number"""

# $Id$

import os, sys
import findrox; findrox.version(2, 0, 2)
import rox
import templates

class Window(rox.Window):
    def __init__(self, initial=None):
        rox.Window.__init__(self)
        self.set_title('Libtool version update tool')

        self.win=self.create_window()


        if initial:
            ver=map(int, initial.split(':'))
            self.current.set_value(ver[0])
            self.revision.set_value(ver[1])
            self.age.set_value(ver[2])

        self.update_version()
        self.show_all()

        self.connect('delete_event', self.goodbye)

    def create_window(self):
        template=templates.load(root='main_table', dict_or_instance=self)
        table=template.getWidget('main_table')
        self.add(table)

        #print template['source_changed']
        self.current=template.getWidget('current')
        self.revision=template.getWidget('revision')
        self.age=template.getWidget('age')

        self.source=template.getWidget('source_changed')
        self.added=template.getWidget('added')
        self.removed=template.getWidget('removed')
        self.changed=template.getWidget('changed')
        
        self.updated=template.getWidget('updated')

    def goodbye(self, *unused):
        self.hide()

    def input_changed(self, adjustment):
        #print adjustment
        self.update_version()

    def toggle_changed(self, tbutton):
        if tbutton==self.source:
            if self.source.get_active():
                self.added.set_sensitive(True)
                self.removed.set_sensitive(True)
                self.changed.set_sensitive(True)
            else:
                self.added.set_sensitive(False)
                self.removed.set_sensitive(False)
                self.changed.set_sensitive(False)
        self.update_version()

    def update_version(self):
        c=self.current.get_value()
        r=self.revision.get_value()
        a=self.age.get_value()

        #s='%d:%d:%d' % (c, r, a)
        #self.original.set_text(s)

        if self.source.get_active():
            r+=1

            added=self.added.get_active()
            removed=self.removed.get_active()
            changed=self.changed.get_active()

            if added or removed or changed:
                c+=1
                r=0

                if added:
                    a+=1
                if removed:
                    a=0

        s='%d:%d:%d' % (c, r, a)
        self.updated.set_text(s)
        self.new_version=s

    def getVersion(self):
        return self.new_version

if len(sys.argv)>1:
    initial=sys.argv[1]
else:
    initial=None
win=Window(initial)
win.show()
rox.mainloop()

print win.getVersion()
