#! /usr/bin/env python

import dbus
import sys, time, os

import findrox; findrox.version(2, 0, 2)
import rox, rox.options, rox.applet, rox.Menu, rox.InfoWin
import gobject

try:
    new_version=(dbus.version>=(0, 40, 0))
except:
    new_version=False

import options
if new_version:
    import dserve3x as dserve
else:
    import dserve2x as dserve

# DBus setup
service_name='uk.co.demon.kerofin.DownloadManager'
interface_name=service_name
object_path='/DownloadManager'

ID=0
SERVER=1
FNAME=2
STATE=3
SIZE=4
TOTAL=5
PER=6
AGE=7

class DMWindow(rox.Window):
    def __init__(self, bus, xid=None):
        rox.Window.__init__(self)

        self.set_title('Download Manager')
        self.set_default_size(400, 100)

        self.dserve=dserve.DownloadManager(bus)
        
        vbox=rox.g.VBox()
        self.add(vbox)
        
        swin = rox.g.ScrolledWindow()
        swin.set_border_width(4)
        swin.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_ALWAYS)
        swin.set_shadow_type(rox.g.SHADOW_IN)
        vbox.pack_start(swin, True, True, 0)

        self.model = rox.g.ListStore(str, str, str, str, str, str, str, str)
        view = rox.g.TreeView(self.model)
        self.view = view
        swin.add(view)

        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Client', cell, text = ID)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Server', cell, text = SERVER)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('File', cell, text = FNAME)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('State', cell, text = STATE)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Fetched', cell, text = SIZE)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Total', cell, text = TOTAL)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Progress', cell, text = PER)
        view.append_column(column)

        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Age', cell, text = AGE)
        view.append_column(column)

        optbut=rox.ButtonMixed(rox.g.STOCK_PREFERENCES, 'Options')
        vbox.pack_start(optbut, False, False, 2)
        optbut.connect('clicked', self.opt_clicked)

        vbox.show_all()

        self.connect('delete_event', self.hide_window)

        #self.auto_show=False
        self.user_show=False

        if xid:
            self.applet=rox.applet.Applet(xid)

            ebox=rox.g.EventBox()
            self.applet.add(ebox)

            vbox=rox.g.VBox()
            ebox.add(vbox)

            icon=rox.g.Image()
            icon.set_from_file(os.path.join(rox.app_dir, '.DirIcon'))
            vbox.pack_start(icon, False, False, 2)
            
            self.alabel=rox.g.Label('0:0')
            vbox.pack_start(self.alabel, False, False, 2)

            self.applet.show_all()

            rox.Menu.set_save_name('DownloadManager')
            self.applet_menu=rox.Menu.Menu('applet', [
                rox.Menu.Action('/Info', 'show_info',
                            stock=rox.g.STOCK_DIALOG_INFO),
                rox.Menu.Separator(),
                rox.Menu.Action('/Options', 'opt_clicked',
                            stock=rox.g.STOCK_PREFERENCES),
                rox.Menu.Separator(),
                rox.Menu.Action('/Show window', 'show_window'),
                rox.Menu.Action('/Hide window', 'hide_window'),
                rox.Menu.Separator(),
                rox.Menu.Action('/Close applet', 'close_applet',
                            stock=rox.g.STOCK_CLOSE),
                rox.Menu.Separator(),
                rox.Menu.Action('/Quit', 'do_quit',
                            stock=rox.g.STOCK_QUIT)
                ])

            self.applet_menu.attach(self.applet, self)

            ebox.add_events(rox.g.gdk.BUTTON_PRESS_MASK)
            ebox.connect("button_press_event", self.click)

        else:
            self.applet=None

        gobject.timeout_add(2000, self.update)

        rox.app_options.add_notify(self.opts_changed)

    def click(self, widget, event, data=None):
        if event.button==1:
            self.show_window()
            return True

        elif event.button==3:
            self.applet_menu.popup(self, event, self.applet.position_menu)
            return True

        return False

    def show_info(self):
        rox.InfoWin.infowin('DownloadManager')

    def close_applet(self):
        self.applet.hide()
        self.applet.destroy()
        self.applet=None

    def show_window(self, *unused):
        self.user_show=True
        self.maybe_show()

    def hide_window(self, *unused):
        self.user_show=False
        self.maybe_show()

    def do_quit(self):
        self.close_applet()
        self.hide_window()
        self.destroy()

    def update(self, *unused):
        self.model.clear()

        nactive=0
        for act in self.dserve.active:
            client=self.dserve.clients[act]
            iter=self.model.append()
            self.model.set(iter, ID, act, SERVER, client.server,
                           FNAME, client.fname,
                           STATE, 'active', SIZE, str(client.size),
                           AGE, str(int(time.time()-client.last)))
            if client.total>0:
                self.model.set(iter, TOTAL, str(client.total),
                               PER, '%3d%%' % (100*client.size/client.total))

            nactive+=1

        keys=self.dserve.clients.keys()
        keys.sort()
        nwait=0
        for id in keys:
            if id not in self.dserve.active:
                client=self.dserve.clients[id]
                iter=self.model.append()
                self.model.set(iter, ID, id, SERVER, client.server,
                               FNAME, client.fname, STATE, 'waiting',
                               AGE, str(int(time.time()-client.last)))
                nwait+=1

        if self.applet:
            self.alabel.set_label('%d:%d' % (nactive,nwait))
            
        if nactive>=options.show_nactive.int_value or nwait>=options.show_nwaiting.int_value:
            self.dserve.auto_show=True
        else:
            self.dserve.auto_show=False
        self.maybe_show()
                
        return True

    def maybe_show(self):
        if self.user_show or self.dserve.auto_show:
            self.show()
        else:
            self.hide()

    def opts_changed(self):
        self.update()
        
    def opt_clicked(self, *unused):
        rox.edit_options()

def run(xid=None):
    try:
        bus=dbus.SessionBus()
        #print bus
        object=DMWindow(bus, xid)

        rox.mainloop()
    except:
        rox.report_exception()

def show_options():
    import dclient
    try:
        server=dclient.connect(False)
        server.showOptions()
    except:
        rox.edit_options()
        rox.mainloop()

if __name__=='__main__':
    if len(sys.argv)==2 and sys.argv[1]=='-o':
        show_options()
    elif len(sys.argv)==3 and sys.argv[1]=='-a':
        run(int(sys.argv[2]))
    else:
        run()
