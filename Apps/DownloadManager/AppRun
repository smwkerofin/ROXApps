#! /usr/bin/env python

import dbus
import sys, time, os

import findrox; findrox.version(2, 0, 2)
import rox, rox.options, rox.applet, rox.Menu, rox.InfoWin

# DBus setup
service_name='uk.co.demon.kerofin.DownloadManager'
interface_name=service_name
object_path='/DownloadManager'

# Out options
rox.setup_app_options('DownloadManager', site='kerofin.demon.co.uk')

allow_nclient=rox.options.Option('allow_nclient', 1)
client_expires=rox.options.Option('client_expires', 60)
show_nactive=rox.options.Option('show_nactive', 2)
show_nwaiting=rox.options.Option('show_nwaiting', 1)

rox.app_options.notify()

class Client:
    """Tracks a download client"""
    def __init__(self, id, server, fname):
        """Store data"""
        self.id=id
        self.server=server
        self.fname=fname
        
        self.last=time.time()
        self.start=self.last
        self.running=False

        self.size=0
        self.total=0

    def expired(self):
        """Has the client failed to update recently and therefore has expired?"""
        #print time.time(), self.last, expires
        return time.time()-self.last>client_expires.int_value

    def run(self):
        """Client has moved from pending to downloading"""
        self.running=True

    def update(self, size=None, total=None):
        """Client has downloaded another chunk"""
        self.last=time.time()
        if size is not None:
            self.size=size
        if total is not None:
            self.total=total

    def __str__(self):
        return '<Client id="%s" host="%s" file="%s" last=%f running=%s>' % (self.id, self.server, self.fname, self.last, self.running)

ID=0
SERVER=1
FNAME=2
STATE=3
SIZE=4
TOTAL=5
PER=6
AGE=7

class DownloadManager(dbus.Object, rox.Window):
    def __init__(self, service, xid=None):
        dbus.Object.__init__(self, object_path, service, [self.Ping,
                                                          self.CanIStart,
                                                          self.QueueSize,
                                                          self.Update,
                                                          self.Done,
                                                          self.Cancel,
                                                          self.ShowOptions,
                                                          self.GetStats,
                                                          self.ShowWindow])

        rox.Window.__init__(self)

        self.clients={}
        self.active=[]

        self.set_title('Download Manager')
        self.set_default_size(400, 100)

        vbox=rox.g.VBox()
        self.add(vbox)
        
        swin = rox.g.ScrolledWindow()
        swin.set_border_width(4)
        swin.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_ALWAYS)
        swin.set_shadow_type(rox.g.SHADOW_IN)
        vbox.pack_start(swin, True, True, 0)

        self.model = rox.g.ListStore(str, str, str, str, str, str, str, str)
        view = rox.g.TreeView(self.model)
        self.view = view
        swin.add(view)

        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Client', cell, text = ID)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Server', cell, text = SERVER)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('File', cell, text = FNAME)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('State', cell, text = STATE)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Fetched', cell, text = SIZE)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Total', cell, text = TOTAL)
        view.append_column(column)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Progress', cell, text = PER)
        view.append_column(column)

        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn('Age', cell, text = AGE)
        view.append_column(column)

        optbut=rox.ButtonMixed(rox.g.STOCK_PREFERENCES, 'Options')
        vbox.pack_start(optbut, False, False, 2)
        optbut.connect('clicked', self.opt_clicked)

        vbox.show_all()

        self.auto_show=False
        self.user_show=False

        if xid:
            self.applet=rox.applet.Applet(xid)

            ebox=rox.g.EventBox()
            self.applet.add(ebox)

            vbox=rox.g.VBox()
            ebox.add(vbox)

            icon=rox.g.Image()
            icon.set_from_file(os.path.join(rox.app_dir, '.DirIcon'))
            vbox.pack_start(icon, False, False, 2)
            
            self.alabel=rox.g.Label('0:0')
            vbox.pack_start(self.alabel, False, False, 2)

            self.applet.show_all()

            rox.Menu.set_save_name('DownloadManager')
            self.applet_menu=rox.Menu.Menu('applet', [
                rox.Menu.Action('/Info', 'show_info',
                            stock=rox.g.STOCK_DIALOG_INFO),
                rox.Menu.Separator(),
                rox.Menu.Action('/Options', 'opt_clicked',
                            stock=rox.g.STOCK_PREFERENCES),
                rox.Menu.Separator(),
                rox.Menu.Action('/Show window', 'show_window'),
                rox.Menu.Action('/Hide window', 'hide_window'),
                rox.Menu.Separator(),
                rox.Menu.Action('/Close applet', 'close_applet',
                            stock=rox.g.STOCK_CLOSE),
                rox.Menu.Separator(),
                rox.Menu.Action('/Quit', 'do_quit',
                            stock=rox.g.STOCK_QUIT)
                ])

            self.applet_menu.attach(self.applet, self)

            ebox.add_events(rox.g.gdk.BUTTON_PRESS_MASK)
            ebox.connect("button_press_event", self.click)

        else:
            self.applet=None

        rox.g.timeout_add(2000, self.update)

        rox.app_options.add_notify(self.opts_changed)

    def click(self, widget, event, data=None):
        if event.button==1:
            self.show_window()
            return True

        elif event.button==3:
            self.applet_menu.popup(self, event, self.applet.position_menu)
            return True

        return False

    def show_info(self):
        rox.InfoWin.infowin('DownloadManager')

    def close_applet(self):
        self.applet.hide()
        self.applet.destroy()
        self.applet=None

    def show_window(self, *unused):
        self.user_show=True
        self.maybe_show()

    def hide_window(self):
        self.user_show=False
        self.maybe_show()

    def do_quit(self):
        self.close_applet()
        self.hide_window()
        self.destroy()

    def update(self, *unused):
        self.model.clear()

        nactive=0
        for act in self.active:
            client=self.clients[act]
            iter=self.model.append()
            self.model.set(iter, ID, act, SERVER, client.server,
                           FNAME, client.fname,
                           STATE, 'active', SIZE, str(client.size),
                           AGE, str(int(time.time()-client.last)))
            if client.total>0:
                self.model.set(iter, TOTAL, str(client.total),
                               PER, '%3d%%' % (100*client.size/client.total))

            nactive+=1

        keys=self.clients.keys()
        keys.sort()
        nwait=0
        for id in keys:
            if id not in self.active:
                client=self.clients[id]
                iter=self.model.append()
                self.model.set(iter, ID, id, SERVER, client.server,
                               FNAME, client.fname, STATE, 'waiting',
                               AGE, str(int(time.time()-client.last)))
                nwait+=1

        if self.applet:
            self.alabel.set_label('%d:%d' % (nactive,nwait))
            
        if nactive>=show_nactive.int_value or nwait>=show_nwaiting.int_value:
            self.auto_show=True
        else:
            self.auto_show=False
        self.maybe_show()
                
        return True

    def maybe_show(self):
        if self.user_show or self.auto_show:
            self.show()
        else:
            self.hide()

    def opts_changed(self):
        self.update()
        
    def Ping(self, method):
        return 1

    def CanIStart(self, method, server, fname):
        id=method.get_sender()
        if id in self.clients:
            client=self.clients[id]
            client.update()
        else:
            client=Client(id, server, fname)
            self.clients[id]=client
        #print 'Start request from', id
        #print 'active', self.active

        if len(self.active)>=allow_nclient.int_value:
            try:
                self.check_expired()
            except:
                print sys.exc_info()[:2]

        if len(self.active)<allow_nclient.int_value:
            #print 'starting', id
            self.active.append(id)
            client.run()
            return True

        #print 'Rejected, %d in queue' % (len(self.clients)-len(self.active))
        return False

    def QueueSize(self, method):
        ntot=len(self.clients)
        nact=len(self.active)
        return ntot-nact
        
    def Update(self, method, size, total):
        id=method.get_sender()
        client=self.clients[id]
        client.update(size, total)

    def Done(self, method):
        id=method.get_sender()
        client=self.clients[id]
        #print client, 'has finished'
        self.lose_client(id)

    def Cancel(self, method, reason):
        #print 'in cancel', self, method, reason
        id=method.get_sender()
        client=self.clients[id]
        #print client, 'has been cancelled', reason
        self.lose_client(id=id)

    def ShowOptions(self, method):
        rox.edit_options()

    def GetStats(self, method):
        act=[]
        for a in self.active:
            client=self.clients[act]
            act.append((client.id, client.fname, client.size, client.total,
                        client.start, client.last))
        
        waiting=len(self.clients)-len(self.active)

        return (act, waiting)

    def ShowWindow(self, method, show):
        self.user_show=show
        self.maybe_show()        
    
    def opt_clicked(self, *unused):
        rox.edit_options()

    def lose_client(self, id=None, client=None):
        if not id and not client:
            return
        
        if not id:
            id=client.id
            
        if id in self.active:
            self.active.remove(id)
        del self.clients[id]

        self.check_available()
        #print 'checked for available slot'

    def check_expired(self):
        # print 'in check_expired', self.clients
        for c in self.clients:
            #print 'id', c
            client=self.clients[c]
            #print client
            if client.expired():
                #print client, 'has expired'
                self.lose_client(c)

    def slotAvailable(self):
        #print 'in slotAvailable'
        self.emit_signal(interface=interface_name,
                         signal_name='slot_available')
        #print 'emitted signal'
        #print rox._toplevel_windows
        #print rox._in_mainloops

    def check_available(self):
        #print 'in check_available', len(self.active), allow_nclient.int_value
        if len(self.active)<allow_nclient.int_value:
            self.slotAvailable()

    def __str__(self, *args):
        return 'DownloadManager-%s' % id(self)

def run(xid=None):
    try:
        bus=dbus.SessionBus()
        server=dbus.Service(service_name, bus)
        object=DownloadManager(server, xid)

        rox.mainloop()
    except:
        rox.report_exception()

def show_options():
    import dclient
    try:
        server=dclient.connect(False)
        server.showOptions()
    except:
        rox.edit_options()
        rox.mainloop()

if __name__=='__main__':
    if len(sys.argv)==2 and sys.argv[1]=='-o':
        show_options()
    elif len(sys.argv)==3 and sys.argv[1]=='-a':
        run(int(sys.argv[2]))
    else:
        run()
