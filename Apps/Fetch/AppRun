#!/usr/bin/env python
#
# $Id$

import os, sys

import findrox; findrox.version(1, 9, 14)
import rox
import gobject

import urllib, urlparse

def run_main():
    while rox.g.events_pending():
        rox.g.main_iteration()

def get_filename(url):
    scheme, location, path, query, fragment=urlparse.urlsplit(url)
    base=os.path.basename(path)
    if not base:
        base='index.html'
    fname=base
    num=1
    while os.access(fname, os.F_OK):
        dot=base.index('.')
        if dot>=0:
            fname=base[:dot]+('.%d' % num)+base[dot:]
        else:
            fname=base+'.%d' % num
        
        num+=1
        
    return fname

class FetchWindow(rox.Window):
    def __init__(self, url, target=None):
        self.url=url
        if not target:
            target=get_filename(url)
        self.target=target
        
        rox.Window.__init__(self)
        self.set_title(self.url)

        vbox=rox.g.VBox()
        self.add(vbox)

        l=rox.g.Label('Download to %s' % self.target)
        vbox.pack_start(l, padding=4)

        self.msg1=rox.g.Label('')
        vbox.pack_start(self.msg1, padding=4)

        self.prog=rox.g.ProgressBar()
        vbox.pack_start(self.prog, padding=4)

        self.connect('delete_event', self.delete_event)

        self.show_all()
        self.open_server()

    def delete_event(self, *unused):
        print 'delete_event', self, unused
        print rox._toplevel_windows
        self.close()
        print rox._toplevel_windows
        
    def message(self, text):
        self.msg1.set_text(text)

    def percent_done(self, size, total):
        if self.prog is None:
            return
        if size>total:
            val=1
        elif total>0:
            val=size/total
        else:
            self.active()
            return
        self.prog.set_fraction(val)
        self.prog.set_text('%d%%' % (val*100))
        run_main()

    def active(self):
        self.prog.set_text('')
        self.prog.pulse()
        run_main()

    def close(self):
        #print 'close'
        self.hide()
        self.destroy()
        self.prog=None
        rox.g.main_quit()

    def open_server(self):
        self.message('Open %s' % self.url)
        urllib.urlretrieve(self.url, self.target, self.report)
        self.finished()

    def report(self, nblock, bsize, tsize):
        #print 'report', self, nblock, bsize, tsize
        nb=nblock*bsize
        if tsize>0:
            self.percent_done(nb, tsize)
        else:
            self.active()
        run_main()

    def finished(self):
        rox.g.timeout_add(3*1000, self.close)
        rox.g.main()
        
def main():
    if len(sys.argv)>1:
        url=sys.argv[1]
        local=None
        if len(sys.argv)>2:
            local=sys.argv[2]
        try:
            win=FetchWindow(url, local)
            #rox.g.timeout_add(2*1000, win.update)
            #rox.g.main()
        except:
            rox.report_exception()

if __name__=='__main__':
    main()
