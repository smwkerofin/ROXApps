#!/usr/bin/env python
#
# $Id: AppRun,v 1.8 2004/08/05 17:26:20 stephen Exp $

import os, sys
import time

import findrox; findrox.version(1, 9, 14)
import rox, rox.choices, rox.options, rox.processes

import urlparse

_=rox._

rox.setup_app_options('Fetch')

allow_pw_change=rox.options.Option('allow_pw_change', True)
wait_for=rox.options.Option('wait_for', 3)

rox.app_options.notify()

bsize=4096
stimeo=5*60

def run_main():
    while rox.g.events_pending():
        rox.g.main_iteration()

def get_filename(url):
    scheme, location, path, query, fragment=urlparse.urlsplit(url)
    base=os.path.basename(path)
    if not base:
        base='index.html'
    fname=base
    num=1
    while os.access(fname, os.F_OK):
        dot=base.index('.')
        if dot>=0:
            fname=base[:dot]+('-%d' % num)+base[dot:]
        else:
            fname=base+'-%d' % num
        
        num+=1
        
    return fname

class FetchWindow(rox.Dialog):
    def __init__(self, url, target=None):
        self.url=url
        if not target:
            target=get_filename(url)
        self.target=target

        self.count=None
        self.start_time=None
        self.tsize=None
        self.con=None
        
        rox.Dialog.__init__(self)
        self.set_title(self.url)
        self.add_button(rox.g.STOCK_CANCEL, rox.g.RESPONSE_CANCEL)
        self.connect('response', self.do_response)

        vbox=self.vbox

        table=rox.g.Table(9, 2)
        vbox.pack_start(table, padding=4)

        line=0
        l=rox.g.Label(_('<b>Source</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label(self.url)
        l.set_line_wrap(True)
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)

        line+=1
        l=rox.g.Label(_('<b>Size</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label('')
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)
        self.size_l=l

        line+=1
        l=rox.g.Label(_('<b>Type</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label('')
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)
        self.type_l=l

        line+=1
        l=rox.g.Label(_('<b>Download to</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label(os.getcwd()+'/')
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)
        line+=1
        l=rox.g.Label(self.target)
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)

        line+=1
        self.msg1=rox.g.Label('')
        self.msg1.set_line_wrap(True)
        table.attach(self.msg1, 0, 2, line, line+1)

        line+=1
        self.prog=rox.g.ProgressBar()
        table.attach(self.prog, 0, 2, line, line+1)

        line+=1
        l=rox.g.Label(_('<b>Estimated time</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label('')
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)
        self.etime=l

        line+=1
        l=rox.g.Label(_('<b>Speed</b>'))
        l.set_use_markup(True)
        l.set_alignment(1., 0.5)
        table.attach(l, 0, 1, line, line+1, xpadding=2)
        l=rox.g.Label('')
        l.set_alignment(0., 0.5)
        table.attach(l, 1, 2, line, line+1, xpadding=2)
        self.speed=l

        self.connect('delete_event', self.delete_event)

        self.proc=None
        self.show_all()
        self.start()

    def do_response(self, *unused):
        if self.proc:
            self.proc.kill()
        msg='Fetch of %s cancelled' % self.url
        if self.count:
            msg+=', %d bytes in %s' % (self.count, self.target)
        msg+='.'
        rox.info(msg)
        sys.exit(0)

    def delete_event(self, *unused):
        #print 'delete_event', self, unused
        #print rox._toplevel_windows
        self.close()
        #print rox._toplevel_windows
        
    def message(self, text):
        self.msg1.set_text(text)
        run_main()

    def percent_done(self, size, total):
        if self.prog is None:
            return
        if size>total:
            val=1.
        elif total>0:
            val=float(size)/total
        else:
            self.active()
            return
        self.prog.set_fraction(val)
        self.prog.set_text('%d%%' % (val*100))
        self.set_title('%d%% %s' % (val*100, self.target))

        if self.start_time and total>0 and size>0:
            now=time.time()
            elapsed=now-self.start_time
            etotal=elapsed*total/size
            eleft=etotal-elapsed
            #print elapsed, etotal, eleft
            secs=int(eleft)
            hours=int(secs/3600)
            secs-=hours*3600
            mins=int(secs/60)
            secs-=mins*60
            if eleft<=0:
                tstr=_('Done')
            elif hours>0:
                tstr='%d:%02d:%02d' % (hours, mins, secs)
            else:
                tstr='%02d:%02d' % (mins, secs)
            self.etime.set_text(tstr)

            if elapsed>0:
                speed=size/elapsed/1024
                self.speed.set_text('%2.1f KB/s' % speed)
            
        run_main()

    def active(self):
        self.prog.set_text('')
        self.prog.pulse()
        run_main()

    def close(self):
        #print 'close'
        if self.proc:
            try:
                self.proc.kill()
            except:
                pass
            self.proc=None
        self.hide()
        self.destroy()
        self.prog=None
        rox.g.main_quit()

    def read_some(self, source, condition, *unused):
        #print source, condition, unused
        #print self.con

        data=''
        while True:
            c=self.con.read(1)
            data+=c
            if c=='\n':
                break
        #print data,
        #self.count+=len(data)
        if data:
            code, arg=data.split('=')
            if code=='m':
                self.message(arg.strip())
            elif code=='t':
                self.type_l.set_text(arg.strip())
            elif code=='s':
                self.size = int(arg)
                self.report(0, self.size)
            elif code=='n':
                self.count=int(arg)
                if self.count==0:
                    self.start_time=time.time()
                self.report(self.count, self.size)
            elif code=='c':
                self.finished()
                return False
            
            return True

        self.finished()
        return False
        
    def start(self):
        r, w=os.pipe()
        self.con=os.fdopen(r, 'r', 1)
        self.proc=rox.processes.PipeThroughCommand(
            ('python', rox.app_dir+'/fetch.py', self.url, self.target),
            None, os.fdopen(w, 'w', 1))

        rox.g.input_add(self.con.fileno(), rox.g.gdk.INPUT_READ,
                        self.read_some)

        self.proc.wait()
        #print 'done waiting'
        self.proc=None
        #self.finished()
        
    def report(self, nb, tsize):
        #print 'report', self, nb, tsize
        if tsize>0:
            self.percent_done(nb, tsize)
            if tsize>4<<20:
                tstr='%d bytes (%d MB)' % (tsize, tsize>>20)
            elif tsize>4<<10:
                tstr='%d bytes (%d KB)' % (tsize, tsize>>10)
            else:
                tstr='%d bytes' % tsize
            self.size_l.set_text(tstr)
        else:
            self.active()
        run_main()

    def finished(self):
        self.con.close()
        self.message(_('Done'))
        run_main()
        rox.g.timeout_add(wait_for.int_value*1000, self.close)
        #rox.mainloop()
        
def main():
    if len(sys.argv)>1:
        url=sys.argv[1]
        local=None
        if len(sys.argv)>2:
            local=sys.argv[2]
        try:
            win=FetchWindow(url, local)
            #rox.g.timeout_add(2*1000, win.update)
            rox.mainloop()
        except:
            rox.report_exception()
    else:
         rox.edit_options()
         rox.mainloop()

if __name__=='__main__':
    main()
