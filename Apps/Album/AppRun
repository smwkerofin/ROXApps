#!/usr/bin/env python

import os, sys
try:
    import datetime
except:
    import time
import shutil, stat

import findrox; findrox.version(1, 9, 14)
import rox, rox.saving, rox.choices, rox.loading
import rox.Menu
import rox.AppInfo

try:
    import ID3
except:
    import localID3 as ID3

rox.setup_app_options('Album')
music_box=rox.options.Option('use_music_box', True)
rox.app_options.notify()

PATH=0
NAME=1
EXT=2

types=('.mp3', '.ogg')

def today():
    try:
        now=datetime.date.today().strftime('%d %B %Y')
    except:
        now=time.strftime('%d %B %Y')
    return now

csize=48
def scale_cover(pixbuf):
    w=pixbuf.get_width()
    h=pixbuf.get_height()
    if w<csize and h<csize:
        return pixbuf
    scale=1.
    if w<csize*2 and h<csize*2:
        scale=0.5
    else:
        if w>h:
            scale=float(csize)/float(w)
        else:
            scale=float(csize)/float(h)

    return pixbuf.scale_simple(int(scale*w), int(scale*h),
                               rox.g.gdk.INTERP_BILINEAR)

class DropableImage(rox.g.Image, rox.loading.XDSLoader):
    def __init__(self):
        rox.g.Image.__init__(self)
        rox.loading.XDSLoader.__init__(self, None)

    def xds_load_from_file(self, path):
        pbuf=rox.g.gdk.pixbuf_new_from_file(path)
        if pbuf:
            self.set_from_pixbuf(scale_cover(pbuf))

    def xds_load_from_stream(self, name, type, stream):
        raise "not load from stream"

class AlbumWindow(rox.Window, rox.loading.XDSLoader, rox.saving.Saveable):
    def __init__(self):
        rox.Window.__init__(self)
        rox.loading.XDSLoader.__init__(self, None)

        self.set_title('Album AppDir creation')
        self.set_default_size(256, 256)

        vbox=rox.g.VBox(spacing=2)
        self.add(vbox)

        table=rox.g.Table(3, 2)
        vbox.pack_start(table, False)

        table.attach(rox.g.Label('Artist'), 0, 1, 0, 1, rox.g.SHRINK, 0, 0, 0)

        self.artist=rox.g.Entry()
        table.attach(self.artist, 1, 2, 0, 1, rox.g.EXPAND|rox.g.FILL,
                     0, 0, 0)

        table.attach(rox.g.Label('Album'), 0, 1, 1, 2, rox.g.SHRINK, 0, 0, 0)

        self.album=rox.g.Entry()
        table.attach(self.album, 1, 2, 1, 2, rox.g.EXPAND|rox.g.FILL,
                     0, 0, 0)

        table.attach(rox.g.Label('Cover'), 0, 1, 2, 3, rox.g.SHRINK, 0, 0, 0)

        self.cover=DropableImage()
        icon=resource('DirIcon.png')
        if icon:
            self.cover.set_from_file(icon)
        table.attach(self.cover, 1, 2, 2, 3, rox.g.EXPAND|rox.g.FILL,
                     0, 0, 0)

        scr=rox.g.ScrolledWindow()
        scr.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_ALWAYS)
        vbox.pack_start(scr)

        self.model=rox.g.ListStore(str, str, str)
        self.view=rox.g.TreeView(self.model)
        self.view.set_reorderable(True)
        scr.add(self.view)

        cell=rox.g.CellRendererText()
        column=rox.g.TreeViewColumn('File', cell, text=PATH)
        self.view.append_column(column)
        column.set_sort_column_id(PATH)

        cell=rox.g.CellRendererText()
        column=rox.g.TreeViewColumn('Track', cell, text=NAME)
        self.view.append_column(column)
        column.set_sort_column_id(NAME)

        self.sbar=rox.g.Statusbar()
        vbox.pack_end(self.sbar, False)

        align=rox.g.Alignment(1.0)
        vbox.pack_end(align, False)
       
        hbox=rox.g.HBox(spacing=4)
        align.add(hbox)

        but=rox.g.Button(stock=rox.g.STOCK_QUIT)
        but.connect('clicked', self.do_quit)
        hbox.pack_start(but)

        but=rox.g.Button(stock=rox.g.STOCK_SAVE)
        but.connect('clicked', self.do_start_save)
        hbox.pack_start(but)

        vbox.show_all()
        
    def add_track(self, fname):
        iter=self.model.append()
        
        p=fname.rfind('.')
        if p<0:
            return
        ext=fname[p:]
        if ext not in types:
            return
        name=self.detect_name(fname)

        self.model.set(iter, PATH, fname, NAME, name, EXT, ext)

    def do_quit(self, *args):
        self.destroy()

    def do_start_save(self, *args):
        icon=self.cover.get_pixbuf()
        uri=self.album.get_text().replace('/', ':')
        if not uri:
            uri='DigitalAlbum'
        sbox=rox.saving.SaveBox(self, uri, 'inode/directory')
        sbox.set_type('inode/directory', self.cover)
        sbox.show()
        #self.sbox=sbox

    def xds_load_from_file(self, path):
        self.add_track(path)

    def xds_load_from_stream(self, name, type, stream):
        raise "not load from stream"

    def detect_name(self, fname):
        title, artist, album=identify(fname)

        if artist and not self.artist.get_text():
            self.artist.set_text(artist)
        if album and not self.album.get_text():
            self.album.set_text(album)

        if title:
            return title.replace('/', ':')
        
        leaf=os.path.basename(fname)
        p=leaf.rfind('.')
        if p>-1:
            ext=leaf[p:]
        else:
            ext=''
        if ext in types:
            leaf=leaf[:p]
        return leaf

    def save_to_file(self, path):
        #print 'save to', path

        self.create_app(path)

    def set_status(self, msg):
        self.ctxt=self.sbar.get_context_id('default')
        try:
            if self.sid:
                self.sbar.pop(self.ctxt)
                self.sid=None
        except:
            self.sid=None
        self.sid=self.sbar.push(self.ctxt, msg)
        while rox.g.events_pending():
            rox.g.main_iteration()
        
    def unset_status(self):
        try:
            if self.sid:
                self.sbar.pop(self.ctxt)
                self.sid=None
        except:
            self.sid=None
        while rox.g.events_pending():
            rox.g.main_iteration()

    def create_app(self, path):
        icon=self.cover.get_pixbuf()
        artist=self.artist.get_text()
        album=self.album.get_text()
        version='1.0.0'
        now=today()
        try:
            user=os.getlogin()
        except:
            user=os.getenv('USER')

        if not artist:
            artist='Unknown'
        if not album:
            album='Unknown'
        
        os.mkdir(path)

        sfn=resource('AppRun')
        dfn=os.path.join(path, 'AppRun')
        shutil.copy(sfn, dfn)
        os.chmod(dfn, 0755)

        sfn=resource('AppInfo.xml')
        dfn=os.path.join(path, 'AppInfo.xml')
        subs={'$ARTIST': artist, '$ALBUM': album, '$VERSION': version,
              '$DATE': now, '$USER': user}
        sf=file(sfn, 'r')
        df=file(dfn, 'w')
        for line in sf.readlines():
            for key, val in subs.iteritems():
                if line.find(key)>-1:
                    line=line.replace(key, val)
            df.write(line)
        sf.close()
        df.close()
        #ai=rox.AppInfo.AppInfo(sfn)
        #ai.setSummary('%s - %s' % (artist, album), 'C')
        #ai.setAbout('Purpose', 'Play %s through xmms' % album, 'C')
        #ai.setAbout('Version', '%s (%s)' % (version, now), 'C')
        #ai.setAbout('Authors', user, 'C')
        #ai.writeToFile(dfn)

        audio_dir=os.path.join(path, 'audio')
        os.mkdir(audio_dir)

        i=1
        iter=self.model.get_iter_first()
        while iter:
            fname=self.model.get_value(iter, PATH)
            name=self.model.get_value(iter, NAME).replace('/', ':')
            ext=self.model.get_value(iter, EXT)

            dfn=os.path.join(audio_dir, '%02d %s%s' % (i, name, ext))
            sid=self.set_status('Copying %s' % name)
            shutil.copy(fname, dfn)

            i+=1
            iter=self.model.iter_next(iter)

        dfn=os.path.join(path, '.DirIcon')
        self.set_status('Copying icon')
        icon.save(dfn, 'png')

        self.unset_status()

def identify(fname):
    try:
        id=ID3.ID3(fname)
    except:
        return None, None, None

    if id.has_key('ARTIST'):
        artist=id['ARTIST']
    else:
        artist=None
    if id.has_key('ALBUM'):
        album=id['ALBUM']
    else:
        album=None
    if id.has_key('TITLE'):
        title=id['TITLE']
    else:
        title=None

    #print title, artist, album
    return title, artist, album

def resource(leaf):
    path=rox.choices.load('Album', leaf)
    if not path:
        path=os.path.join(rox.app_dir, 'Resources', leaf)
    return path
      
def main(argv):
    if len(argv)>0 and argv[0]=='-o':
         rox.edit_options()
        
    else:
        win=AlbumWindow()
        win.show()
        while rox.g.events_pending():
            rox.g.main_iteration()

        for fname in argv:
            win.add_track(fname)
            while rox.g.events_pending():
                rox.g.main_iteration()

    try:
        rox.mainloop()
    except:
        rox.report_exception()

if __name__=='__main__':
    try:
        main(sys.argv[1:])
    except:
        rox.report_exception()
