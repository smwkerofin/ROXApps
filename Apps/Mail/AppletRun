#!/usr/bin/env python
#
# $Id: AppletRun,v 1.9 2003/03/16 12:27:03 stephen Exp $

import findrox
import rox
import rox.choices
import rox.applet
import rox.loading
g=rox.g

import sys

import os.path
import os
from stat import *
import string

from InfoWin import InfoWin
from mailers import Mailer
from selmailer import SelectMailer
from Checker import getCheckers
from checkwin import CheckWin
from my_support import *
from SendFile import SendFile

def mail_file():
    username=os.getenv("LOGNAME")
    dmf="/var/mail/"+username
    return os.getenv("MAIL", dmf)

mailfile=mail_file()
app_dir=os.path.dirname(sys.argv[0])

# Get the defined mailers
mailers=None
fname=rox.choices.load('Mail', 'mailers.xml')
if fname!=None:
    mailers=Mailer.read_from(Mailer('dummy', ''), fname)
else:
    elm=Mailer('elm', '/usr/local/bin/elm', read='xterm -e %s')
    mailx=Mailer('mailx', '/usr/bin/mailx', read='xterm -e %s')
    fname=rox.choices.save('Mail', 'mailers.xml', 1)
    mailers=[mailx, elm]
    elm.write_to(mailers, fname)

mailer=mailers[0]

# Get the list of programs to check for or collect mail
fname=rox.choices.load('Mail', 'check.xml')
if fname!=None:
    checkers=getCheckers(fname)
else:
    checkers=None

# Make our applet
class MailApplet(rox.applet.Applet, rox.loading.XDSLoader):
    def __init__(self, xid, app_dir, mailers, checkers):
        rox.applet.Applet.__init__(self, xid)
        rox.loading.XDSLoader.__init__(self, None)

        self.mail=-1
        self.app_dir=app_dir
        self.mailers=mailers
        self.checkers=checkers

        self.set_border_width(4)
        vbox=g.VBox()
        self.add(vbox)
        vbox.show()
        
        ebox=g.EventBox()
        ebox.set_events(g.gdk.BUTTON_PRESS_MASK | g.gdk.BUTTON_RELEASE_MASK)
        vbox.add(ebox)

        view=g.HBox()
        ebox.add(view)

        self.nomail_pixmap=g.Image()
        self.nomail_pixmap.set_from_file(app_dir+"/pixmaps/nomail.xpm")
        self.mail_pixmap=g.Image()
        self.mail_pixmap.set_from_file(app_dir+"/pixmaps/mail.xpm")

        view.add(self.mail_pixmap)
        view.add(self.nomail_pixmap)

        self.infoline=g.Label('')
        vbox.add(self.infoline)
        self.infoline.show()

        self.menu=g.Menu()

        item=g.MenuItem("Info")
        iw=InfoWin('Mail', 'Monitor mail box', '0.3.0 (16 March 2003)',
                   'Stephen Watson', 'http://www.kerofin.demon.co.uk/rox/')
        iw.connect('delete_event', lambda iw: iw.hide())
        def show_infowin(widget, data):
            iw=data
            iw.show()
        item.connect("activate", show_infowin, iw)

        self.menu.append(item)

        item=g.MenuItem("Select mailer...")
        def select_mailer(widget, mailer, self):
            self.select_mailer(mailer);
            
        def show_sel_mailer(widget):
            sm=SelectMailer(mailers)
            sm.set_callback(select_mailer, self)
            sm.show()
        item.connect("activate", show_sel_mailer)
        self.menu.append(item)

        item = g.MenuItem("Check mail programs")
        def show_checker_win(widget):
            cw=CheckWin(checkers)
            cw.show()
        item.connect("activate", show_checker_win)
        self.menu.append(item)

        item = g.MenuItem("Quit")
        item.connect("activate", g.mainquit)
        self.menu.append(item)

        self.menu.show_all()
        
        def check_child(pid):
            res=os.waitpid(pid, os.WNOHANG);
            if res[0]>0:
                return 0
            return 1
    
        def click(widget, event, self):
            if event.button==1:
                pid=run_prog(app_dir+"/AppRun")
                if pid>0:
                    g.timeout_add(1000, check_child, pid)
                return 1
            elif event.button==3:
                self.menu.popup(None, None, None, event.button, event.time)
                return 1
            return 0

        ebox.connect("button_press_event", click, self)

        def update(obj):
            obj.update()

        self.tag=g.timeout_add(5000, update, self)

        if self.checkers!=None:
            for ch in self.checkers:
                ch.schedule()
                
    def select_mailer(self, mailer):
        if mailer!=None:
            try:
                i=self.mailers.index(mailer)
            except:
                i=-1
            if i>0:
                if i==len(mailers)-1:
                    self.mailers=[mailer]+self.mailers[:i]
                else:
                    self.mailers=[mailer]+self.mailers[:i]+self.mailers[i+1:]
            self.mailers[0].write_to(self.mailers, rox.choices.save('Mail', 'mailers.xml', 1))

    def update(self):
        if file_size(mailfile)>0:
            if self.mail!=1:
                self.nomail_pixmap.hide()
                self.mail_pixmap.show()
                self.mail=1
                g.gdk.beep()
                n=count_from(mailfile)
                self.infoline.set_text(str(n))
        else:
            if self.mail!=0:
                self.mail_pixmap.hide()
                self.nomail_pixmap.show()
                self.mail=0
                self.infoline.set_text("")
        return g.TRUE

    def xds_load_from_file(self, path):
        sf=SendFile(path)
        sf.show()

# Show everything and wait for events...
try:
    plug=MailApplet(sys.argv[1], app_dir, mailers, checkers)

    plug.show_all()
    plug.update()
    g.mainloop()
    
except:
    rox.report_exception()


