#!/usr/bin/env python

import findrox
import rox.choices

from gtk import *
import sys

import os.path
import os
from stat import *
import string

from InfoWin import InfoWin
from mailers import Mailer
from selmailer import SelectMailer
from Checker import getCheckers
from my_support import *

def mail_file():
    username=os.getenv("LOGNAME")
    dmf="/var/mail/"+username
    return os.getenv("MAIL", dmf)

mailfile=mail_file()
app_dir=os.path.dirname(sys.argv[0])
mail=-1

# Get the defined mailers
mailers=None
fname=rox.choices.load('Mail', 'mailers.xml')
if fname!=None:
    mailers=Mailer.read_from(Mailer('dummy', ''), fname)
else:
    elm=Mailer('elm', '/usr/local/bin/elm', read='xterm -e %s')
    mailx=Mailer('mailx', '/usr/bin/mailx', read='xterm -e %s')
    fname=rox.choices.save('Mail', 'mailers.xml', 1)
    mailers=[mailx, elm]
    elm.write_to(mailers, fname)

mailer=mailers[0]

# Get the list of programs to check for or collect mail
fname=rox.choices.load('Mail', 'check.xml')
if fname!=None:
    checkers=getCheckers(fname)
else:
    checkers=None

# Find the XID of the socket which this applet will plug into.
xid = int(sys.argv[1])
# Create the plug. If it is destroyed, quit the program.
plug = GtkPlug(xid)
plug.connect('destroy', mainquit)

# Choose a nice small size for our applet...
plug.set_usize(48, -1)
plug.set_border_width(4)

ebox=GtkEventBox()
ebox.set_events(GDK.BUTTON_PRESS_MASK | GDK.BUTTON_RELEASE_MASK)
plug.add(ebox)

view=GtkHBox()
ebox.add(view)

nomail_pixmap=GtkPixmap(plug, app_dir+"/pixmaps/nomail.xpm", None);
mail_pixmap=GtkPixmap(plug, app_dir+"/pixmaps/mail.xpm", None);

view.add(mail_pixmap)
view.add(nomail_pixmap)

#print "made button"

TARGET_URI_LIST=0
targets=[('text/uri-list', 0, TARGET_URI_LIST)]
text_uri_list=atom_intern("text/uri-list")
ebox.drag_dest_set(DEST_DEFAULT_ALL, targets, GDK.ACTION_COPY | GDK.ACTION_PRIVATE)
#print "button now drop site"

def drag_drop(widget, context, x, y, time, data=None):
    widget.drag_get_data(context, text_uri_list, time)
    return TRUE

def got_uri_list(widget, context, sel_data, time):
    uris=extract_uris(sel_data.data)
    if not uris:
        widget.drag_finish(context, FALSE, FALSE, time)
        return
    for uri in uris:
        path=get_local_path(uri)
        if path:
            run_prog(app_dir+"/AppRun "+path)
    widget.drag_finish(context, TRUE, FALSE, time)
    
def drag_data_received(widget, context, x, y, sel_data, info, time, data=None):
    if sel_data.data==None:
        widget.drag_finish(context, FALSE, FALSE, time)
        return

    if info==TARGET_URI_LIST:
        got_uri_list(widget, context, sel_data, time)
    else:
        widget.drag_finish(context, FALSE, FALSE, time)

#view.connect("drag_drop", drag_drop)
ebox.connect("drag_data_received", drag_data_received)
#print "button connected to drag_data_received"

# Menu
menu=GtkMenu()

item=GtkMenuItem("Info")
iw=InfoWin('Mail', 'Monitor mail box', '0.1.2 (18 July 2001)',
           'Stephen Watson', 'http://www.kerofin.demon.co.uk/rox/')
iw.connect('delete_event', lambda iw: iw.hide())
def show_infowin(widget, data):
    iw=data
    iw.show()
item.connect("activate", show_infowin, iw)
menu.append(item)

item=GtkMenuItem("Select mailer...")
def select_mailer(widget, mailer):
    global mailers
    if mailer!=None:
        try:
            i=mailers.index(mailer)
        except:
            i=-1
        if i>0:
            #print i, len(mailers)
            if i==len(mailers)-1:
                mailers=[mailer]+mailers[:i]
            else:
                mailers=[mailer]+mailers[:i]+mailers[i+1:]
        mailers[0].write_to(mailers, rox.choices.save('Mail', 'mailers.xml', 1))
    widget.hide()
            
def show_sel_mailer(widget):
    sm=SelectMailer(mailers)
    sm.set_callback(select_mailer)
    sm.show()
item.connect("activate", show_sel_mailer)
menu.append(item)

item = GtkMenuItem("Quit")
item.connect("activate", mainquit)
menu.append(item)

menu.show_all()

def check_child(pid):
    res=os.waitpid(pid, os.WNOHANG);
    #print res
    if res[0]>0:
        return 0
    return 1
    
def click(widget, event, data=None):
    if event.button==1:
        pid=run_prog(app_dir+"/AppRun")
        if pid>0:
            timeout_add(1000, check_child, pid)
        return 1
    elif event.button==3:
        menu.popup(None, None, None, event.button, event.time)
        return 1
    return 0

ebox.connect("button_press_event", click)

def update():
    global mail
    if file_size(mailfile)>0:
        if mail==0:
            nomail_pixmap.hide()
            mail_pixmap.show()
            mail=1
            gdk_beep()
    else:
        if mail!=0:
            mail_pixmap.hide()
            nomail_pixmap.show()
            mail=0
    #print "update, mail=", mail, " (size=", file_size(mailfile), ")"
    return TRUE


timeout_add(5000, update)
#print "added timeout"

def run_check(checker):
    #print checker.getCommand()
    os.system(checker.getCommand())
    return TRUE

if checkers!=None:
    for ch in checkers:
        to=ch.getInterval()*1000
        ch.setTimeout(timeout_add(int(to), run_check, ch))

#print fname, mailer, mailers

# Show everything and wait for events...
plug.show_all()
update()
mainloop()

