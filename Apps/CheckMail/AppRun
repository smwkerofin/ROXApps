#!/usr/bin/env python

import os
import sys
import socket

import findrox; findrox.version(2, 0, 3)

import rox
import rox.tasks
import rox.Menu
import gobject

import finger
import status_icon

host='kerofin@post.demon.co.uk'
port=79

ID=0
FROM=1
TO=2
SIZE=3

mail_icon=rox.g.gdk.pixbuf_new_from_file(os.path.join(rox.app_dir,
                                                      'images',
                                                      'mail.png'))
rox.Menu.set_save_name('CheckMail', site='kerofin.demon.co.uk')

class MailQueue:
    def __init__(self):
        self.scan=None
        self.queue=[]
        self.clients=[]
        
        gobject.timeout_add(60*1000, self.start_update)
        self.start_update()

    def start_update(self):
        if self.scan:
            return True

        try:
            self.scan=finger.Finger(host, long_output=True)
            rox.tasks.Task(self.update())
        except:
            pass
        return True

    def update(self):
        queue=[]
        header_end=False
        nmail=0
        
        while True:
            yield rox.tasks.InputBlocker(self.scan.fileno())
            try:
                line=self.scan.readline()
            except:
                line=None
            if not line:
                break
            toks=line.strip().split()
            if len(toks)<4:
                continue
            if toks[0]=='---':
                header_end=True

            elif header_end:
                queue.append((int(toks[0]), toks[1], toks[2],
                                      int(toks[3])))
                nmail+=1
                

        self.scan=None

        self.queue=queue
        for client in self.clients:
            client.update_queue(self, self.queue)

    def add_client(self, client):
        if client not in self.clients:
            self.clients.append(client)

    def remove_client(self, client):
        if client in self.clients:
            self.clients.remove(client)

    def get_update(self, client):
        client.update_queue(self, self.queue)

class MailQueueClient:
    def __init__(self, mailq):
        mailq.add_client(self)
        self.mailq=mailq

    def update_queue(self, mailq, entries):
        pass

    def __del__(self):
        self.mailq.remove_client(self)

    def unhook(self):
        self.mailq.remove_client(self)

    def get_update(self):
        self.mailq.get_update(self)

class Window(rox.Window, MailQueueClient):
    def __init__(self, mailq):
        rox.Window.__init__(self)
        MailQueueClient.__init__(self, mailq)
        
        self.set_title(host)

        vbox=rox.g.VBox()
        self.add(vbox)

        scrw=rox.g.ScrolledWindow()
        scrw.set_size_request(256+128, 64)
        scrw.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_AUTOMATIC)
        vbox.pack_start(scrw, True, True, 2)
        
        self.store=rox.g.ListStore(int, str, str, int)
        self.view=rox.g.TreeView(self.store)

        cell=rox.g.CellRendererText()
        col=rox.g.TreeViewColumn('From', cell, text=FROM)
        self.view.append_column(col)
        
        cell=rox.g.CellRendererText()
        col=rox.g.TreeViewColumn('To', cell, text=TO)
        self.view.append_column(col)

        self.view.get_selection().set_mode(rox.g.SELECTION_NONE)

        scrw.add(self.view)

        vbox.show_all()

        self.get_update()

    def update_queue(self, mailq, entries):
        self.store.clear()
        for ent in entries:
            it=self.store.append()
            self.store.set(it, ID, ent[0], FROM, ent[1],
                               TO, ent[2], SIZE, ent[3])

class StatusIcon(status_icon.StatusIcon, MailQueueClient):
    def __init__(self, mailq):
        MailQueueClient.__init__(self, mailq)
        status_icon.StatusIcon.__init__(self, mail_icon,
                                        rox.Menu.Menu('main', [
            rox.Menu.Action('Quit', 'do_quit', stock=rox.g.STOCK_QUIT)]))

        self.get_update()

    def update_queue(self, mailq, entries):
        count=len(entries)
        if count>0:
            self.set_tooltip('%d mail entries waiting' % count)
        self.set_visible(len(entries)>0)

    def do_quit(self, *args):
        rox.toplevel_unref()
        self.set_visible(False)

    def on_activate(self, icon):
        Window(self.mailq).show()

icon=StatusIcon(MailQueue())

rox.mainloop()
