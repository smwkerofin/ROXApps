#!/usr/bin/env python

import os, sys

import findrox; findrox.version(2, 0, 4)
import rox, rox.applet, rox.Menu, rox.uri_handler
import gobject
import socket

#import stats
#import usage
import sitecom

class Applet(rox.applet.Applet):
    def __init__(self, xid=0):
        rox.applet.Applet.__init__(self, xid)

        ebox=rox.g.EventBox()
        self.add(ebox)

        vbox=rox.g.VBox(False, 2)
        align=rox.g.Alignment(0.5, 0.5, 0.0, 0.0)
        ebox.add(align)
        align.add(vbox)

        self.sicon=rox.g.Image()
        self.sicon.set_from_stock(rox.g.STOCK_NO, rox.g.ICON_SIZE_MENU)
        align=rox.g.Alignment(0.5, 0.5, 1.0, 0.0)
        align.add(self.sicon)
        vbox.pack_start(align, False, False)

        self.tx=rox.g.Label('?')
        align=rox.g.Alignment(1.0, 0.5, 0.0, 0.0)
        align.add(self.tx)
        vbox.pack_start(align, False, False)
        
        self.rx=rox.g.Label('?')
        align=rox.g.Alignment(1.0, 0.5, 0.0, 0.0)
        align.add(self.rx)
        vbox.pack_start(align, False, False)

        ebox.connect('button_press_event', self.click)
        ebox.add_events(rox.g.gdk.BUTTON_PRESS_MASK)

        self.show_all()

        rox.Menu.set_save_name('ADSLStats', site='kerofin.demon.co.uk')
        self.menu=rox.Menu.Menu('main', [
            #rox.Menu.Action('Bandwidth usage', 'do_usage'),
            rox.Menu.Action('Quit', 'do_quit', stock=rox.g.STOCK_QUIT)
            ])

        try:
            self.parser=sitecom.Modem()
        except socket.error:
            rox.report_exception()
            self.parser=None
        except:
            rox.report_exception()
            self.parser=None

        gobject.timeout_add(30*1000, self.new_update)
        self.new_update()

        self.warning=None
        #self.usage=usage.UsageList()
        #gobject.timeout_add(60*60*1000, self.usage_update)
        #self.usage_update()

    def click(self, widget, event, data=None):
        if event.button==3:
            self.menu.popup(self, event, self.position_menu)
            return True
        elif event.button==1:
            pid=rox.uri_handler.launch(self.parser.get_status_url())
            gobject.timeout_add(10*1000, self.launched, pid)
            return True
        return False

    def do_quit(self, *unused):
        rox.toplevel_unref()

    def do_usage(self, *unused):
        self.usage.open_window()

    def launched(self, pid):
        # Reap a child
        p, status=os.waitpid(pid, os.WNOHANG)
        return p!=pid

    def set_stats(self, ok, tx, rx):
        if ok:
            icon=rox.g.STOCK_YES
        else:
            icon=rox.g.STOCK_NO
        self.sicon.set_from_stock(icon, rox.g.ICON_SIZE_MENU)
        self.tx.set_text(str(tx))
        self.rx.set_text(str(rx))

    def new_update(self, *unused):
        if not self.parser:
            try:
                self.parser=sitecom.Modem()
            except socket.error:
                return True
        try:
            #self.parser=stats.open_adsl()
            #gobject.timeout_add(100, self.current)
            rx, tx=self.parser.get_chandata()
            self.set_stats(True, tx, rx)
        except Exception, ex:
            print >> sys.stderr, ex
            #self.parser=None
            self.set_stats(False, 'X', 'X')
            try:
                self.parser.connect()
            except Exception, ex:
                print >> sys.stderr, 'Reconnect:', ex
                
        return True

    def current(self, *unused):
        #print >> sys.stderr, 'current', self.parser
        if not self.parser:
            return False

        if not self.parser.update():
            self.parser=None
            return False
        
        try:
            tx, rx=self.parser.getConSpeed()
            #print >> sys.stderr, tx, rx
            self.set_stats(True, tx, rx)
            self.parser=None
        except:
            pass

        #print >> sys.stderr, 'again'
        return True

    def show_warning(self, state=True):
        if state and not self.warning:
            self.warning=rox.StatusIcon(add_ref=False, show=True,
                                        icon_stock=rox.g.STOCK_DIALOG_WARNING)
        elif self.warning:
            self.warning.set_visible(state)

    def usage_update(self, *unused):
        try:
            self.usage.update()
            days, rx, tx=self.usage.get_summary()
            #print days, rx, tx
            max_rx=60*(1<<30)
            self.show_warning(rx>max_rx*0.9)
        except:
            self.show_warning(False)
        return True

    def on_exit(self):
        self.usage.on_exit()
    
if len(sys.argv)>1:
    app=Applet(sys.argv[1])
else:
    app=Applet()

rox.mainloop()
