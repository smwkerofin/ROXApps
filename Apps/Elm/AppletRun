#!/usr/bin/env python

import findrox

from gtk import *
import sys

import os.path
import os
from stat import *
import string
from support import *

def mail_file():
    username=os.getenv("LOGNAME")
    dmf="/var/mail/"+username
    return os.getenv("MAIL", dmf)

mailfile=mail_file()
app_dir=os.path.dirname(sys.argv[0])
mail=-1

# Find the XID of the socket which this applet will plug into.
xid = int(sys.argv[1])
# Create the plug. If it is destroyed, quit the program.
plug = GtkPlug(xid)
plug.connect('destroy', mainquit)

# Choose a nice small size for our applet...
plug.set_usize(48, -1)
plug.set_border_width(4)

# Now, fill the plug with all our widgets.
vbox = GtkVBox(TRUE, 2)
plug.add(vbox)

view=GtkHBox()
#view.set_events(GDK.BUTTON_PRESS_MASK | GDK.BUTTON_RELEASE_MASK)
vbox.pack_start(view)

nomail_pixmap=GtkPixmap(plug, app_dir+"/pixmaps/nomail.xpm", None);
mail_pixmap=GtkPixmap(plug, app_dir+"/pixmaps/mail.xpm", None);

view.add(mail_pixmap)
view.add(nomail_pixmap)

def click(widget, event, data=None):
    if event.button==1:
        run_prog(app_dir+"/AppRun")
        return 1
    return 0

#view.connect("button_release_event", click)
#print "made button"

TARGET_URI_LIST=0
targets=[('text/uri-list', 0, TARGET_URI_LIST)]
text_uri_list=atom_intern("text/uri-list")
view.drag_dest_set(DEST_DEFAULT_ALL, targets, GDK.ACTION_COPY | GDK.ACTION_PRIVATE)
#print "button now drop site"

def drag_drop(widget, context, x, y, time, data=None):
    widget.drag_get_data(context, text_uri_list, time)
    return TRUE

def got_uri_list(widget, context, sel_data, time):
    uris=extract_uris(sel_data.data)
    if not uris:
        widget.drag_finish(context, FALSE, FALSE, time)
        return
    for uri in uris:
        path=get_local_path(uri)
        if path:
            run_prog(app_dir+"/AppRun "+path)
    widget.drag_finish(context, TRUE, FALSE, time)
    
def drag_data_received(widget, context, x, y, sel_data, info, time, data=None):
    if sel_data.data==None:
        widget.drag_finish(context, FALSE, FALSE, time)
        return

    if info==TARGET_URI_LIST:
        got_uri_list(widget, context, sel_data, time)
    else:
        widget.drag_finish(context, FALSE, FALSE, time)

#view.connect("drag_drop", drag_drop)
view.connect("drag_data_received", drag_data_received)
#print "button connected to drag_data_received"

def update():
    global mail
    if file_size(mailfile)>0:
        if mail==0:
            nomail_pixmap.hide()
            mail_pixmap.show()
            mail=1
            gdk_beep()
    else:
        if mail!=0:
            mail_pixmap.hide()
            nomail_pixmap.show()
            mail=0
    #print "update, mail=", mail, " (size=", file_size(mailfile), ")"
    return TRUE


timeout_add(5000, update)
#print "added timeout"

# Show everything and wait for events...
plug.show_all()
update()
mainloop()

