#!/usr/bin/env python

import os
import sys
import socket
import time

import findrox; findrox.version(2, 0, 3)

import rox
import rox.tasks
import rox.Menu
import rox.basedir
import gobject

import status

icon_path=os.path.join(rox.app_dir, '.DirIcon')
icon=rox.g.gdk.pixbuf_new_from_file(icon_path)
sicon=icon.scale_simple(22, 22, rox.g.gdk.INTERP_BILINEAR)

rox.Menu.set_save_name('Status', site='kerofin.demon.co.uk')

class StatusIcon(rox.StatusIcon):
    def __init__(self):
        rox.StatusIcon.__init__(self,
                                add_ref=True,
                                menu=rox.Menu.Menu('main', [
            rox.Menu.Action('Quit', 'do_quit', stock=rox.g.STOCK_QUIT)]),
                                show=True,
                                icon_pixbuf=sicon
                                )

        self.connect('activate', self.do_activate)

        self.last_display=0
        self.current_entries=[]
        self.shown=set()

        self.load_time()
        self.do_update()
        gobject.timeout_add(10*60*1000, self.do_update)

    def do_update(self):
        try:
            stat=status.Status()
        except:
            rox.report_exception()
            return True
        self.current_entries=stat.get_entries(self.last_display)
        self.filter_entries()

        if len(self.current_entries)>0:
            self.set_visible(True)
            self.set_tooltip('%d status entries' % len(self.current_entries))
        else:
            self.set_visible(False)
        self.last_update=time.time()
        #print self.last_update
        return True

    def filter_entries(self):
        ok=[]
        for e in self.current_entries:
            if e.get_message() not in self.shown:
                ok.append(e)
        self.current_entries=ok

    def do_activate(self, icon):
        #print 'do_activate', icon
        win=StatusWindow(self.current_entries)
        win.show()
        self.last_display=self.last_update
        self.set_visible(False)
        for e in self.current_entries:
            self.shown.add(e.get_message())
        self.current_entries=[]
        self.store_time()

    def do_quit(self, *args):
        #print 'do_quit', args
        rox.toplevel_unref()
        self.set_visible(False)

    def store_time(self):
        cfgdir=rox.basedir.save_config_path('kerofin.demon.co.uk', 'Status')
        fname=os.path.join(cfgdir, 'timestamp')
        f=file(fname, 'w')
        f.write('%f\n' % self.last_display)
        f.close()

    def load_time(self):
        fname=rox.basedir.load_first_config('kerofin.demon.co.uk', 'Status',
                                            'timestamp')
        if not fname:
            return
        try:
            #print fname
            l=file(fname, 'r').readline().strip()
            #print l
            self.last_display=float(l)
            #print self.last_display
        except:
            pass

OP=0
DATE=1
MESG=2
ENTRY=3

class StatusWindow(rox.Window):
    def __init__(self, entries):
        rox.Window.__init__(self)
        self.set_title('Demon status')

        vbox=rox.g.VBox()
        self.add(vbox)

        scrw=rox.g.ScrolledWindow()
        scrw.set_size_request(512, 384)
        scrw.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_AUTOMATIC)
        vbox.pack_start(scrw, True, True, 2)
        
        self.store=rox.g.ListStore(str, str, str, object)
        self.view=rox.g.TreeView(self.store)

        cell=rox.g.CellRendererText()
        col=rox.g.TreeViewColumn('Op', cell, text=OP)
        self.view.append_column(col)
        
        cell=rox.g.CellRendererText()
        col=rox.g.TreeViewColumn('Date', cell, text=DATE)
        self.view.append_column(col)
        
        cell=rox.g.CellRendererText()
        col=rox.g.TreeViewColumn('Message', cell, text=MESG)
        self.view.append_column(col)

        scrw.add(self.view)

        vbox.show_all()

        self.load(entries)

    def load(self, entries):
        self.store.clear()
        for ent in entries:
            it=self.store.append()
            
            self.store.set(it, OP, ent.operator,
                           DATE, time.ctime(ent.date),
                           MESG, ent.get_message(),
                           ENTRY, ent)
        
def main():
    StatusIcon()
    rox.mainloop()

if __name__=='__main__':
    main()
