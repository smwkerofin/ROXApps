#!/usr/bin/env python

import os, sys

import findrox; findrox.version(2, 0, 3)
import rox, rox.options, rox.filer, rox.OptionsBox
import time
import xml.dom.minidom

# xplanet parameters
bodies=('default', 'sun', 'mercury', 'venus', 'earth', 'moon', 'mars',
        'phobos', 'deimos', 'jupiter', 'io', 'europa',  'ganymede',
        'callisto',  'saturn',
        'mimas', 'enceladus', 'tethys', 'dione', 'rhea', 'titan',
        'hyperion', 'iapetus',
        'phoebe', 'uranus', 'miranda', 'ariel', 'umbriel', 'titania',
        'oberon',  'neptune', 'triton', 'nereid', 'pluto', 'charon',
        'random',  'major')
projections=('none', 'ancient',  'azimuthal',  'hemisphere',  'lambert',
             'mercator', 'mollweide', 'peters', 'orthographic', 
             'rectangular')

rox.setup_app_options('XPlanet', site='kerofin.demon.co.uk')

program_name=rox.options.Option('program_name', 'xplanet')
start_mode=rox.options.Option('start_mode', 0)

backdrop_delay=rox.options.Option('backdrop_delay', 10)
backdrop_body=rox.options.Option('backdrop_body', 10)

window_body=rox.options.Option('window_body', 'earth')
window_lat=rox.options.Option('window_lat', 0)
window_lon=rox.options.Option('window_lon', 0)
window_proj=rox.options.Option('window_proj', 0)
window_wait=rox.options.Option('window_wait', 0)
window_timewarp=rox.options.Option('window_timewarp', 1)

def build_set_as_backdrop(box, node, label):
    #print label, `label`
    button=rox.g.Button(label)
    box.may_add_tip(button, node)
    def set_as_backdrop(*unused):
        check_binary()
        backdrop_daemon()
    button.connect('clicked', set_as_backdrop)
    return [button]

def build_run_in_window(box, node, label):
    button=rox.g.Button(label)
    box.may_add_tip(button, node)
    def run_in_window(*unused):
        check_binary()
        show_window(False)
    button.connect('clicked', run_in_window)
    return [button]

def build_body_selector(box, node, label, option):
    return build_selector(box, node, label, option, bodies)

def build_projection_selector(box, node, label, option):
    return build_selector(box, node, label, option, projections)

rox.OptionsBox.widget_registry['set-as-backdrop']=build_set_as_backdrop
rox.OptionsBox.widget_registry['run-in-window']=build_run_in_window
rox.OptionsBox.widget_registry['body-selector']=build_body_selector
rox.OptionsBox.widget_registry['projection-selector']=build_projection_selector

rox.app_options.notify()

def main(argv):
    mode=start_mode.int_value
    if len(argv)>1:
        if argv[1]=='--backdrop':
            mode=2
            
        elif argv[1]=='-o':
            mode=0
            
        elif argv[1]=='-b':
            check_binary()
            set_backdrop_app()
            return

    if mode==0:
        show_options()
    elif mode==1:
        check_binary()
        show_window()
    else:
        backdrop_daemon()

def show_options():
    rox.edit_options()
    rox.mainloop()

def get_body(option):
    return bodies[option.int_value]
def get_projection(option):
    return projections[option.int_value]

def show_window(block=True):
    cmd=program_name.value+' -window'
    if window_body.int_value:
        cmd+=' -body %s' % get_body(window_body)
    if window_proj.int_value:
        cmd+=' -projection %s' % get_projection(window_proj)
    if window_wait.int_value:
        cmd+=' -wait %d' % window_wait.int_value
    cmd+=' -timewarp %d' % window_timewarp.int_value
    cmd+=' -latitude '+window_lat.value
    cmd+=' -longitude '+window_lon.value
    if not block:
        cmd+=' &'
    os.system(cmd)

def backdrop_daemon():
    try:
        while True:
            backdrop()
            time.sleep(backdrop_delay.int_value*60)
    except IOError, ex:
        import errno
        if ex.errno==errno.EPIPE:
            return
        raise

def set_backdrop_app():
    xml="""<?xml version="1.0"?>
    <env:Envelope xmlns:env="http://www.w3.org/2001/12/soap-envelope">
    <env:Body xmlns="http://rox.sourceforge.net/SOAP/ROX-Filer">
    <SetBackdropApp>
    <App>%s</App>
    </SetBackdropApp>
    </env:Body>
    </env:Envelope>"""
    
    cin = os.popen('rox -R', 'w')
    cin.write(xml % rox.app_dir)

def get_cache_dir():
    fallback='/tmp'
    try:
        cdir=os.getenv('XDG_CACHE_HOME', os.path.expanduser('~/.cache'))
        if os.access(cdir, os.F_OK)!=1:
            os.mkdir(cdir)
        if not os.path.isdir(cdir):
            return fallback
        ddir=os.path.join(cdir, 'kerofin.demon.co.uk')
        if os.access(ddir, os.F_OK)!=1:
            os.mkdir(ddir)
        if not os.path.isdir(ddir):
            return fallback
        wdir=os.path.join(ddir, 'XPlanet')
        if os.access(wdir, os.F_OK)!=1:
            os.mkdir(wdir)
        if not os.path.isdir(wdir):
            return fallback
        return wdir
    except:
        return fallback

cache_dir=get_cache_dir()

def get_cache_file(ext='.png'):
    base='backdrop_%d_%f%s' % (os.getuid(), time.time(), ext)
    return os.path.join(cache_dir, base)

def backdrop():
    fname=get_cache_file()
    try:
        width=rox.g.gdk.screen_width()
        height=rox.g.gdk.screen_height()
        cmd=program_name.value+' -geometry %dx%d+0+0' % (width, height)
        cmd+=' -projection mercator'
        if backdrop_body.int_value:
            cmd+=' -body %s' % get_body(backdrop_body.int_value)
        cmd+=' -output %s -num_times 1' % fname
        
        os.system(cmd)
        sys.stdout.write('centre %s\n' % fname)
        sys.stdout.flush()

        line=sys.stdin.readline()
        while line!='ok\n':
            #print >> sys.stderr, line
            line=sys.stdin.readline()
        #print >> sys.stderr, 'It was Ok'
        
    finally:
        try:
            os.remove(fname)
        except:
            pass

def find_binary(name='xplanet'):
    if '/' in name:
        if os.access(name, os.X_OK):
            return name
        return None
    
    for xdir in os.getenv('PATH').split(':'):
        path=os.path.join(xdir, name)
        if os.access(path, os.X_OK):
            return path

def check_binary(name=None):
    if not name:
        name=program_name.value
    if not find_binary(name):
        rox.alert('Program "%s" does not appear to exist on this system' %
                  name)

def build_selector_option_menu(box, node, label, option, values):
    lbl=rox.g.Label(label)
    opt=rox.g.OptionMenu()
    box.may_add_tip(opt, node)
    menu=rox.g.Menu()
    for val in values:
        menu.append(rox.g.MenuItem(val.capitalize()))
    opt.set_menu(menu)
    #opt.set_history(option.int_value)
    box.handlers[option]=(
        lambda: str(opt.get_history()),
        lambda: opt.set_history(option.int_value))
    opt.connect('changed', lambda w: box.check_widget(option))

    return [lbl, opt]

def build_selector_combo_box(box, node, label, option, values):
    lbl=rox.g.Label(label)
    combo=rox.g.combo_box_new_text()
    box.may_add_tip(combo, node)
    for value in values:
        combo.append_text(value.capitalize())

    box.handlers[option]=(
        lambda: str(combo.get_active()),
        lambda: combo.set_active(option.int_value))
    combo.connect('changed', lambda w: box.check_widget(option))

    return [lbl, combo]
    
def build_selector(box, node, label, option, values):
    if rox.g.gtk_version>=(2, 4, 0):
        return build_selector_combo_box(box, node, label, option, values)
    return build_selector_option_menu(box, node, label, option, values)
    
main(sys.argv)
