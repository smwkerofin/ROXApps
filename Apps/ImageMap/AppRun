#!/usr/bin/env python
#
# $Id: AppRun,v 1.1.1.1 2004/05/19 18:24:00 stephen Exp $

import os, sys
import math

import findrox; findrox.version(1, 9, 14)
import rox
import rox.loading, rox.saving

_=rox._

TYPE=0
COORDS=1
LINK=2
DESC=3
AREA=4

RECTANGLE=0
CIRCLE=1
POLYGON=2

class ImageMapWin(rox.Window, rox.loading.XDSLoader, rox.saving.Saveable):
    def __init__(self, path=None):
        rox.Window.__init__(self)

        self.set_title(_('ImageMap'))
        #self.set_size_request(480, 480)

        vbox=rox.g.VBox(False, 2)
        self.add(vbox)

        self.image_fname=None
        self.image_fname_label=rox.g.Label('')
        vbox.pack_start(self.image_fname_label, False)

        #self.image=rox.g.Image()
        #vbox.pack_start(self.image, False)

        self.drawing=rox.g.DrawingArea()
        self.drawing.connect('expose_event', self.expose_image)
        self.drawing.add_events(rox.g.gdk.BUTTON_PRESS_MASK|
                                rox.g.gdk.BUTTON_RELEASE_MASK|
                                rox.g.gdk.BUTTON1_MOTION_MASK)
        self.drawing.connect('button_press_event', self.button_press_image)
        self.drawing.connect('button_release_event', self.button_release_image)
        self.drawing.connect('motion_notify_event', self.motion_image)
        vbox.pack_start(self.drawing, False)
        swin = rox.g.ScrolledWindow()
        swin.set_border_width(4)
        swin.set_policy(rox.g.POLICY_NEVER, rox.g.POLICY_ALWAYS)
        swin.set_shadow_type(rox.g.SHADOW_IN)
        #swin.set_size_request(128, 64)
        vbox.pack_start(swin, True, True, 0)

        hbox=rox.g.HBox(False, 2)
        vbox.pack_start(hbox, False)
        label=rox.g.Label(_('Description of image:'))
        hbox.pack_start(label, False)
        self.alt=rox.g.Entry()
        hbox.pack_start(self.alt)

        self.model = rox.g.ListStore(str, str, str, str, object)
        view = rox.g.TreeView(self.model)
        self.view = view
        self.view.set_size_request(256, 128)
        swin.add(view)
        view.set_search_column(1)
        
        selection=self.view.get_selection()
        selection.set_mode(rox.g.SELECTION_SINGLE)
        selection.connect('changed', self.select_area)

        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn(_('Type'), cell, text = TYPE)
        view.append_column(column)
        column.set_sort_column_id(TYPE)
        
        cell = rox.g.CellRendererText()
        column = rox.g.TreeViewColumn(_('Coords'), cell, text = COORDS)
        view.append_column(column)
        column.set_sort_column_id(COORDS)

        def url_edited(cell, path, new_text, win):
            #print 'url_edited', cell, path, new_text, win
            iter=win.model.get_iter_from_string(path)
            area=win.model.get_value(iter, AREA)
            area.setURL(new_text)
            win.model.set(iter, LINK, area.getURL())
        cell = rox.g.CellRendererText()
        cell.set_property('editable', True)
        cell.connect('edited', url_edited, self)
        column = rox.g.TreeViewColumn(_('URL'), cell, text = LINK)
        view.append_column(column)
        column.set_sort_column_id(LINK)

        def desc_edited(cell, path, new_text, win):
            iter=win.model.get_iter_from_string(path)
            area=win.model.get_value(iter, AREA)
            area.setDescript(new_text)
            win.model.set(iter, DESC, area.getDescript())
        cell = rox.g.CellRendererText()
        cell.set_property('editable', True)
        cell.connect('edited', desc_edited, self)
        column = rox.g.TreeViewColumn(_('Description'), cell, text = DESC)
        view.append_column(column)
        column.set_sort_column_id(DESC)

        hbox=rox.g.HBox(False, 2)
        vbox.pack_start(hbox, False)
        
        but=rox.g.Button(stock=rox.g.STOCK_ADD)
        but.connect('clicked', self.add_area)
        hbox.pack_start(but, False)
        
        self.type_select=rox.g.OptionMenu()
        tsmenu=rox.g.Menu()
        tsmenu.append(rox.g.MenuItem(_('Rectangle')))
        tsmenu.append(rox.g.MenuItem(_('Circle')))
        self.type_select.set_menu(tsmenu)
        hbox.pack_start(self.type_select, False)
        
        but=rox.g.Button(stock=rox.g.STOCK_DELETE)
        hbox.pack_start(but, False)

        hbox=rox.g.HBox(False, 2)
        vbox.pack_start(hbox, False)
        label=rox.g.Label(_('Background URL:'))
        hbox.pack_start(label, False)
        self.background_url=rox.g.Entry()
        hbox.pack_start(self.background_url)

        hbox=rox.g.HBox(False, 2)
        vbox.pack_start(hbox, False)
        
        but=rox.g.Button(stock=rox.g.STOCK_SAVE_AS)
        but.connect('clicked', self.start_save)
        hbox.pack_start(but, False)
        
        vbox.show_all()

        rox.loading.XDSLoader.__init__(self, ['image/png', 'image/jpg',
                                     'image/gif'])

        self.pixbuf=None
        self.time_out=None
        self.areas=[]
        self.current_area=None
        self.origin=None

        if path:
            self.load_from_file(path)

    def xds_load_from_file(self, path):
        self.load_image_from_file(path)

    def expose_image(self, *unused):
        #print 'expose_image', self, unused

        w2, h2=self.drawing.size_request()
        gc=self.drawing.window.new_gc(foreground=rox.g.gdk.color_parse('white'))
        self.drawing.window.draw_rectangle(gc, True, 0, 0, w2, h2)

        if not self.pixbuf:
            return

        w=self.pixbuf.get_width()
        h=self.pixbuf.get_height()

        if w2>w:
            x=(w2-w)/2
        else:
            x=0
        y=0

        self.pixbuf.render_to_drawable_alpha(self.drawing.window,
                                             0, 0, x, y, -1, -1,
                                             0, 127,
                                             rox.g.gdk.RGB_DITHER_NONE, 0, 0)

        if self.current_area:
            self.current_area.markup(self.drawing.window)

    def set_image(self, pixbuf):
        self.pixbuf=pixbuf
        self.drawing.set_size_request(pixbuf.get_width(), pixbuf.get_height())

    def load_image_from_file(self, path):
        pbuf=rox.g.gdk.pixbuf_new_from_file(path)
        if pbuf:
            self.pixbuf=pbuf
            self.set_image(pbuf)
            self.image_fname=path
            self.image_fname_label.set_text(path)
            #self.set_size_request(pbuf.get_width(), pbuf.get_height())

    def load_from_file(self, path):
        self.set_title(_('ImageMap %s') % path)

    def show_area(self, area):
        #print 'show_area', area
        self.drawing.queue_draw()
        return True

    def begin_show_area(self, area):
        if self.time_out:
            rox.g.timeout_remove(self.time_out)
        self.current_area=area
        self.time_out=rox.g.timeout_add(500, self.show_area, area)

    def add_rect(self):
        pbuf=self.pixbuf
        area=Rectangle('', 0, 0, pbuf.get_width(), pbuf.get_height())
        return area
        
    def add_circle(self):
        pbuf=self.pixbuf
        area=Circle('', 0, 0, pbuf.get_width(), pbuf.get_height())
        return area
        
    def add_area(self, *unused):
        type=self.type_select.get_history()
        if type==RECTANGLE:
            area=self.add_rect()
        elif type==CIRCLE:
            area=self.add_circle()
        else:
            rox.bug('Unknown area type to add')
            return
        area.setLimit(self.pixbuf.get_width(), self.pixbuf.get_height())
        self.areas.append(area)
        self.begin_show_area(area)

        iter=self.model.append()
        self.model.set(iter, TYPE, area.getType(), COORDS, area.getCoords(),
                       LINK, area.getURL(), DESC, area.getDescript(),
                       AREA, area)
        
        selection=self.view.get_selection()
        selection.select_iter(iter)

    def button_image(self, area, event, *unused):
        #print 'button_image', self, area, event, unused
        if self.current_area:
            self.current_area.change(int(event.x), int(event.y), event.button)
            self.update_area()

    def button_press_image(self, area, event, *unused):
        #print 'button_press_image', self, area, event, unused
        if event.button==1:
            self.origin=(int(event.x), int(event.y))
            if self.current_area:
                self.current_area.setBounds(self.origin[0], self.origin[1],
                                            self.origin[0], self.origin[1],
                                            event.button)
                self.update_area()

    def button_release_image(self, area, event, *unused):
        #print 'button_release_image', self, area, event, unused
        if event.button==1 and self.origin:
            self.current_area.setBounds(self.origin[0], self.origin[1],
                                        int(event.x), int(event.y),
                                        0)
            self.origin=None

    def motion_image(self, area, event, *unused):
        #print 'motion_image', self, area, event, unused
        if self.current_area and self.origin:
            self.current_area.setBounds(self.origin[0], self.origin[1],
                                            int(event.x), int(event.y),
                                            1)
            self.update_area()

    def update_area(self):
        selection=self.view.get_selection()
        model, iter=selection.get_selected()
        #print model, iter
        if iter:
            area=model.get_value(iter, AREA)
            if area!=self.current_area:
                return
            self.model.set(iter, TYPE, area.getType(),
                           COORDS, area.getCoords(),
                           LINK, area.getURL(), AREA, area)
        
    def select_area(self, tree_sel, *unused):
        #print 'select_area', self, tree_sel, unused

        model, iter=tree_sel.get_selected()
        #print model, iter
        if iter:
            area=model.get_value(iter, AREA)
            self.current_area=area

    def start_save(self, *unused):
        self.sbox=rox.saving.SaveBox(self, 'image_map.html', 'text/html')
        self.sbox.show()

    def save_to_stream(self, f):
        if not self.pixbuf:
            return
        id='clientmap%d' % int(os.times()[4])
        imfile=os.path.basename(self.image_fname)
        w=self.pixbuf.get_width()
        h=self.pixbuf.get_height()
        alt=self.alt.get_text()

        f.write('<IMG ALT="%s" WIDTH=%d HEIGHT=%d SRC="%s" USEMAP="#%s">\n' %
                (alt, w, h, imfile, id))
        f.write('<MAP name="%s">\n' % id)
        f.write('<!-- Generated by ImageMap -->\n')

        iter=self.model.get_iter_first()
        while iter:
            area=self.model.get_value(iter, AREA)
            f.write('  %s\n' % area.getHTML())

            iter=self.model.iter_next(iter)

        durl=self.background_url.get_text()
        if durl:
            f.write('  <AREA SHAPE="default" HREF="%s">\n' % durl)
            
        f.write('</MAP>\n')

    def set_uri(self, uri):
        self.set_title('ImageMap %s' % uri)        
        
class Area:
    def __init__(self, url, desc=''):
        self.url=url
        self.max_width=0
        self.max_height=0
        self.desc=desc
    def getURL(self):
        return self.url
    def setURL(self, url):
        self.url=url
    def getDescript(self):
        return self.desc
    def setDescript(self, s):
        self.desc=s
    def getCoords(self):
        return '?'
    def getType(self):
        return '?'
    def getHTML(self):
        return '<!-- umm... -->'
    def markup(self, pbuf, cmap):
        pass
    def setBounds(self, x0, y0, x1, y1, button):
        pass
    def __str__(self):
        return self.getHTML()
    def __repr__(self):
        return self.getType()+' '+self.getCoords()+' '+self.url
    def setLimit(self, width, height):
        self.max_width=width
        self.max_height=height

class Rectangle(Area):
    def __init__(self, url, x, y, width, height, desc=''):
        Area.__init__(self, url, desc)
        self.x=x
        self.y=y
        self.width=width
        self.height=height

        self.max_width=width
        self.max_height=height
        self.step=0

    def getType(self):
        return 'Rectangle'

    def getCoords(self):
        return '%d,%d,%d,%d' % (self.x, self.y, self.x+self.width,
                                self.y+self.height)

    def markup(self, drawable):
        self.step+=1
        if self.step%2==0:
            def draw_box(draw, gc, x, y, width, height):
                #print x, y, width, height
                draw.draw_line(gc, x, y, x+width-1, y)
                draw.draw_line(gc, x+width-1, y, x+width-1, y+height-1)
                draw.draw_line(gc, x+width-1, y+height-1, x, y+height-1)
                draw.draw_line(gc, x, y+height-1, x, y)
            gc=drawable.new_gc(foreground=rox.g.gdk.color_parse('white'),
                             function=rox.g.gdk.XOR)
            draw_box(drawable, gc, self.x, self.y, self.width, self.height)

    def setBounds(self, x0, y0, x1, y1, button):
        if x0<=x1:
            self.x=x0
            self.width=x1-x0
        else:
            self.x=x1
            self.width=x0-x1
        if y0<=y1:
            self.y=y0
            self.height=y1-y0
        else:
            self.y=y1
            self.height=y0-y1
        
    def getHTML(self):
        s='<area shape="rect" coords="%d,%d,%d,%d" href="%s" alt="%s">' % (
            self.x, self.y, self.x+self.width, self.y+self.height,
            self.url, self.desc)
        return s
            
class Circle(Area):
    def __init__(self, url, x, y, width, height, desc=''):
        Area.__init__(self, url, desc)
        if width<height:
            size=width
        else:
            size=height
        self.x=x+width/2
        self.y=y+height/2
        self.r=size/2

        self.step=0
        
    def getType(self):
        return 'Circle'

    def getCoords(self):
        return '%d,%d,%d' % (self.x, self.y, self.r)

    def markup(self, drawable):
        self.step+=1
        if self.step%2==0:
            gc=drawable.new_gc(foreground=rox.g.gdk.color_parse('white'),
                             function=rox.g.gdk.XOR)
            drawable.draw_arc(gc, False, self.x-self.r, self.y-self.r,
                              self.r*2, self.r*2, 0, 64*360)

    def getHTML(self):
        s='<area shape="circle" coords="%d,%d,%d" href="%s" alt="%s">' % (
            self.x, self.y, self.r, self.url, self.desc)
        return s
            
    def setBounds(self, x0, y0, x1, y1, button):
        self.x=x0
        self.y=y0
        self.r=math.sqrt((x1-x0)**2+(y1-y0)**2)
        
if __name__=='__main__':
    if len(sys.argv)>1:
        win=ImageMapWin(sys.argv[1])
    else:
        win=ImageMapWin()
    win.show()
    try:
        rox.mainloop()
    except:
        rox.report_exception()
